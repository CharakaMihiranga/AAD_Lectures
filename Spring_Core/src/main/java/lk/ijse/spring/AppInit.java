package lk.ijse.spring;

import lk.ijse.spring.aop.Transaction;
import lk.ijse.spring.config.Config;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class AppInit {
    public static void main(String[] args) {
        // Create spring container for the application (IOC)
        var ctx = new AnnotationConfigApplicationContext(); // Create a new container
        ctx.register(Config.class); // Source for bean definitions
        ctx.refresh(); // Refresh the container this will create the beans
//        ctx.close(); // Close the container this will destroy the beans
//        ConfigurableBeanFactory beanFactory = ctx.getBeanFactory(); // Get the bean factory
//        boolean isSingletonCustomer = beanFactory.isSingleton("customer"); // Check whether the customer bean is a singleton
//        System.out.println("Is customer a singleton: "+isSingletonCustomer);

//        Transaction transaction = ctx.getBean("transaction", Transaction.class); //Get bean
        Transaction transaction = (Transaction) ctx.getBean("transaction"); //Get bean
        transaction.startTransaction();
        transaction.endTransaction();

        ctx.registerShutdownHook(); // Close the container this will destroy the beans,Difference between .close() vs registerShutdownHook() is that .close() will not work in a non-web application
    }
}


// ** Spring context types ** //
// 1. AnnotationConfigApplicationContext: This is used to create a spring container using Java configuration.
// 2. ClassPathXmlApplicationContext: This is used to create a spring container using XML configuration(Based on internal source).
// 3. FileSystemXmlApplicationContext: This is used to create a spring container using XML configuration(Based on External source).
// 4. AnnotationConfigurationWebApplicationContext: This is used to create a spring container using Java configuration(Specialized for web apps).
// 5. XmlWebApplicationContext: This is used to create a spring container using XML configuration.

// ** POJO **//
// POJO stands for Plain Old Java Object. It is a class that does not depend on any framework-specific classes.
// It is a simple class that has attributes and getter and setter methods to access those attributes.
// It is a class that does not depend on any framework-specific classes.

// ** API Documentation ** //
//API Documentation is a deliverable that is generated by the development team during the development phase of a software project.
// It is used to provide information about the classes, methods, and fields of the software project.

// ** Spring Bean ** //
// A Spring bean is an object that is instantiated, assembled, and managed by the Spring IoC container.

// ** Dependency Injection ** //
// Dependency Injection is a design pattern that is u sed to inject the dependencies of a class from an external source.